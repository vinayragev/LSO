var t = {
        d: function (e, s) {
            for (var r in s) t.o(s, r) && !t.o(e, r) && Object.defineProperty(e, r, { enumerable: !0, get: s[r] });
        },
        o: function (t, e) {
            return Object.prototype.hasOwnProperty.call(t, e);
        },
    },
    e = {};
t.d(e, {
    L: function () {
        return m;
    },
});
const s = Object.freeze({ fadeIn: "fadeIn", slideDown: "slideDown" }),
    r = Object.freeze({ error: "kompletr.error", domDone: "kompletr.dom.done", dataDone: "kompletr.data.done", selectDone: "kompletr.select.done" }),
    i = Object.freeze({ cache: "cache", callback: "callback", local: "local" }),
    o = Object.freeze({ prefix: "prefix", expression: "expression" }),
    a = Object.freeze({ light: "light", dark: "dark" });
class n {
    constructor() {}
    static fadeIn(t) {
        (t.style.opacity = 0),
            (t.style.display = "block"),
            (function e() {
                let s = parseFloat(t.style.opacity);
                (s += 0.1) > 1 || ((t.style.opacity = s), requestAnimationFrame(e));
            })();
    }
    static fadeOut(t) {
        (t.style.opacity = 1),
            (function e() {
                (t.style.opacity -= 0.1) < 0 ? (t.style.display = "none") : requestAnimationFrame(e);
            })();
    }
    static slideUp(t, e = 500) {
        (t.style.transitionProperty = "height, margin, padding"),
            (t.style.transitionDuration = e + "ms"),
            (t.style.boxSizing = "border-box"),
            (t.style.height = t.offsetHeight + "px"),
            t.offsetHeight,
            (t.style.overflow = "hidden"),
            (t.style.height = 0),
            (t.style.paddingTop = 0),
            (t.style.paddingBottom = 0),
            (t.style.marginTop = 0),
            (t.style.marginBottom = 0),
            window.setTimeout(() => {
                (t.style.display = "none"),
                    t.style.removeProperty("height"),
                    t.style.removeProperty("padding-top"),
                    t.style.removeProperty("padding-bottom"),
                    t.style.removeProperty("margin-top"),
                    t.style.removeProperty("margin-bottom"),
                    t.style.removeProperty("overflow"),
                    t.style.removeProperty("transition-duration"),
                    t.style.removeProperty("transition-property");
            }, e);
    }
    static slideDown(t, e = 500) {
        t.style.removeProperty("display");
        let s = window.getComputedStyle(t).display;
        "none" === s && (s = "block"), (t.style.display = s);
        let r = t.offsetHeight;
        (t.style.overflow = "hidden"),
            (t.style.height = 0),
            (t.style.paddingTop = 0),
            (t.style.paddingBottom = 0),
            (t.style.marginTop = 0),
            (t.style.marginBottom = 0),
            t.offsetHeight,
            (t.style.boxSizing = "border-box"),
            (t.style.transitionProperty = "height, margin, padding"),
            (t.style.transitionDuration = e + "ms"),
            (t.style.height = r + "px"),
            t.style.removeProperty("padding-top"),
            t.style.removeProperty("padding-bottom"),
            t.style.removeProperty("margin-top"),
            t.style.removeProperty("margin-bottom"),
            window.setTimeout(() => {
                t.style.removeProperty("height"), t.style.removeProperty("overflow"), t.style.removeProperty("transition-duration"), t.style.removeProperty("transition-property");
            }, e);
    }
    static animateBack(t, e = s.fadeIn, r = 500) {
        return n[{ fadeIn: "fadeOut", slideDown: "slideUp" }[e]](t, r);
    }
}
class l {
    broadcaster = null;
    cache = null;
    callbacks = {};
    configuration = null;
    dom = null;
    props = null;
    constructor({ configuration: t, properties: e, dom: s, cache: i, broadcaster: o, onKeyup: a, onSelect: l, onError: h }) {
        try {
            (this.configuration = t),
                (this.broadcaster = o),
                (this.props = e),
                (this.dom = s),
                (this.cache = i),
                this.broadcaster.subscribe(r.error, this.error),
                this.broadcaster.subscribe(r.dataDone, this.showResults),
                this.broadcaster.subscribe(r.domDone, n[this.configuration.animationType]),
                this.broadcaster.subscribe(r.domDone, this.bindResults),
                this.broadcaster.subscribe(r.selectDone, this.closeTheShop),
                this.broadcaster.listen(this.dom.input, "keyup", this.suggest),
                this.broadcaster.listen(this.dom.body, "click", this.closeTheShop),
                (a || l || h) && (this.callbacks = Object.assign(this.callbacks, { onKeyup: a, onSelect: l, onError: h }));
        } catch (t) {
            o ? o.trigger(r.error, t) : console.error(`[kompletr] An error has occured -> ${t.stack}`);
        }
    }
    closeTheShop = (t) => {
        if (t.srcElement === this.dom.input) return !0;
        n.animateBack(this.dom.result, this.configuration.animationType, this.configuration.animationDuration), this.resetPointer();
    };
    resetPointer = () => {
        this.props.pointer = -1;
    };
    error = (t) => {
        console.error(`[kompletr] An error has occured -> ${t.stack}`), n.fadeIn(this.dom.result), this.callbacks.onError && this.callbacks.onError(t);
    };
    filter = (t, e) =>
        t.filter((t) => {
            const s = "string" == typeof t.data ? t.data : t.data[this.configuration.propToMapAsValue];
            return this.configuration.filterOn === o.prefix ? 0 === s.toLowerCase().lastIndexOf(e.toLowerCase(), 0) : -1 !== s.toLowerCase().lastIndexOf(e.toLowerCase());
        });
    showResults = async ({ from: t, data: e }) => {
        (this.props.data = e),
            (e = this.props.data.map((t, e) => ({ idx: e, data: t }))),
            this.callbacks.onKeyup || (e = this.filter(e, this.dom.input.value)),
            this.cache && t !== i.cache && this.cache.set({ string: this.dom.input.value, data: e }),
            this.dom.buildResults(e.slice(0, this.configuration.maxResults), this.configuration.fieldsToDisplay);
    };
    bindResults = () => {
        if (this.dom.result?.children?.length)
            for (let t = 0; t < this.dom.result.children.length; t++)
                ((t) => {
                    this.broadcaster.listen(this.dom.result.children[t], "click", () => {
                        (this.dom.focused = this.dom.result.children[t]), this.select(this.dom.focused.id);
                    });
                })(t);
    };
    suggest = (t) => {
        if (this.dom.input.value.length < this.configuration.startQueryingFromChar) return;
        const e = t.keyCode;
        switch (e) {
            case 13:
                this.select(this.dom.focused.id);
                break;
            case 38:
            case 40:
                this.navigate(e);
                break;
            default:
                this.dom.input.value !== this.props.previousValue && this.hydrate(this.dom.input.value), this.resetPointer();
        }
    };
    hydrate = async (t) => {
        try {
            this.cache && (await this.cache.isValid(t))
                ? this.cache.get(t, (t) => {
                      this.broadcaster.trigger(r.dataDone, { from: i.cache, data: t });
                  })
                : this.callbacks.onKeyup
                ? this.callbacks.onKeyup(t, (t) => {
                      this.broadcaster.trigger(r.dataDone, { from: i.callback, data: t });
                  })
                : this.broadcaster.trigger(r.dataDone, { from: i.local, data: this.props.data });
        } catch (t) {
            this.broadcaster.trigger(r.error, t);
        }
    };
    navigate = (t) =>
        (38 == t || 40 == t) &&
        !(this.props.pointer < -1 || this.props.pointer > this.dom.result.children.length - 1) &&
        (38 === t && this.props.pointer >= -1 ? this.props.pointer-- : 40 === t && this.props.pointer < this.dom.result.children.length - 1 && this.props.pointer++, void this.dom.focus(this.props.pointer));
    select = (t = 0) => {
        (this.dom.input.value = "object" == typeof this.props.data[t] ? this.props.data[t][this.configuration.propToMapAsValue] : this.props.data[t]),
            this.callbacks.onSelect && this.callbacks.onSelect(this.props.data[t]),
            this.broadcaster.trigger(r.selectDone);
    };
}
class h {
    _animationType = s.fadeIn;
    _animationDuration = 500;
    _multiple = !1;
    _theme = a.light;
    _fieldsToDisplay = [];
    _maxResults = 10;
    _startQueryingFromChar = 2;
    _propToMapAsValue = "";
    _filterOn = o.prefix;
    _cache = 0;
    get animationType() {
        return this._animationType;
    }
    set animationType(t) {
        const e = Object.keys(s);
        if (!e.includes(t)) throw new Error(`animation.type should be one of ${e.toString()}`);
        this._animationType = t;
    }
    get animationDuration() {
        return this._animationDuration;
    }
    set animationDuration(t) {
        if (isNaN(parseInt(t, 10))) throw new Error("animation.duration should be an integer");
        this._animationDuration = t;
    }
    get multiple() {
        return this._multiple;
    }
    set multiple(t) {
        this._multiple = t;
    }
    get theme() {
        return this._theme;
    }
    set theme(t) {
        const e = Object.keys(a);
        if (!e.includes(t)) throw new Error(`theme should be one of ${e.toString()}, ${t} given`);
        this._theme = t;
    }
    get fieldsToDisplay() {
        return this._fieldsToDisplay;
    }
    set fieldsToDisplay(t) {
        this._fieldsToDisplay = t;
    }
    get maxResults() {
        return this._maxResults;
    }
    set maxResults(t) {
        this._maxResults = t;
    }
    get startQueryingFromChar() {
        return this._startQueryingFromChar;
    }
    set startQueryingFromChar(t) {
        this._startQueryingFromChar = t;
    }
    get propToMapAsValue() {
        return this._propToMapAsValue;
    }
    set propToMapAsValue(t) {
        this._propToMapAsValue = t;
    }
    get filterOn() {
        return this._filterOn;
    }
    set filterOn(t) {
        const e = Object.keys(o);
        if (!e.includes(t)) throw new Error(`filterOn should be one of ${e.toString()}, ${t} given`);
        this._filterOn = t;
    }
    get cache() {
        return this._cache;
    }
    set cache(t) {
        if (isNaN(parseInt(t, 10))) throw new Error("cache should be an integer");
        this._cache = t;
    }
    constructor(t) {
        if (void 0 !== t) {
            if ("object" != typeof t) throw new Error("options should be an object");
            (this.theme = t?.theme || this._theme),
                (this.animationType = t?.animationType || this._animationType),
                (this.animationDuration = t?.animationDuration || this._animationDuration),
                (this.multiple = t?.multiple || this._multiple),
                (this.fieldsToDisplay = t?.fieldsToDisplay || this._fieldsToDisplay),
                (this.maxResults = t?.maxResults || this._maxResults),
                (this.startQueryingFromChar = t?.startQueryingFromChar || this._startQueryingFromChar),
                (this.propToMapAsValue = t?.propToMapAsValue || this._propToMapAsValue),
                (this.filterOn = t?.filterOn || this._filterOn),
                (this.cache = t?.cache || this._cache);
        }
    }
}
class c {
    _name = null;
    _duration = null;
    _braodcaster = null;
    constructor(t, e = 0, s = "kompletr.cache") {
        if (!window.caches) return !1;
        (this._broadcaster = t), (this._name = s), (this._duration = e);
    }
    get(t, e) {
        window.caches
            .open(this._name)
            .then((s) => {
                s.match(t).then(async (t) => {
                    e(await t.json());
                });
            })
            .catch((t) => {
                this._broadcaster.trigger(r.error, t);
            });
    }
    set({ string: t, data: e }) {
        window.caches
            .open(this._name)
            .then((s) => {
                const r = new Headers();
                r.set("Content-Type", "application/json"), r.set("Cache-Control", `max-age=${this._duration}`), s.put(`/${t}`, new Response(JSON.stringify(e), { headers: r }));
            })
            .catch((t) => {
                this._broadcaster.trigger(r.error, t);
            });
    }
    async isValid(t) {
        try {
            const e = await window.caches.open(this._name);
            return !!(await e.match(`/${t}`));
        } catch (t) {
            this._broadcaster.trigger(r.error, t);
        }
    }
}
class u {
    subscribers = [];
    constructor() {}
    subscribe(t, e) {
        if (!Object.values(r).includes(t)) throw new Error(`Event should be one of ${Object.keys(r)}: ${t} given.`);
        this.subscribers.push({ type: t, handler: e });
    }
    listen(t, e, s) {
        t.addEventListener(e, s);
    }
    trigger(t, e = {}) {
        if (!Object.values(r).includes(t)) throw new Error(`Event should be one of ${Object.keys(r)}: ${t} given.`);
        this.subscribers.filter((e) => e.type === t).forEach((t) => t.handler(e));
    }
}
class p {
    _data = null;
    get data() {
        return this._data;
    }
    set data(t) {
        if (!Array.isArray(t)) throw new Error(`data must be an array (${t.toString()} given)`);
        this._data = t;
    }
    _pointer = null;
    get pointer() {
        return this._pointer;
    }
    set pointer(t) {
        if (isNaN(parseInt(t, 10))) throw new Error(`pointer must be an integer (${t.toString()} given)`);
        this._pointer = t;
    }
    _previousValue = null;
    get previousValue() {
        return this._previousValue;
    }
    set previousValue(t) {
        this._previousValue = t;
    }
    constructor(t = []) {
        this._data = t;
    }
}
class d {
    _identifiers = { results: "kpl-result" };
    _classes = { main: "kompletr", input: "input--search", results: "form--search__result", result: "item--result", data: "item--data", focus: "focus" };
    _body = null;
    get body() {
        return this._body;
    }
    set body(t) {
        this._body = t;
    }
    _input = null;
    get input() {
        return this._input;
    }
    set input(t) {
        if (t instanceof HTMLInputElement == 0) throw new Error(`input should be an HTMLInputElement instance: ${t} given.`);
        this._input = t;
    }
    _focused = null;
    get focused() {
        return this._focused;
    }
    set focused(t) {
        this._focused = t;
    }
    _result = null;
    get result() {
        return this._result;
    }
    set result(t) {
        this._result = t;
    }
    _broadcaster = null;
    constructor(t, e, s = { theme: "light" }) {
        (this._broadcaster = e),
            (this.body = document.getElementsByTagName("body")[0]),
            (this.input = t instanceof HTMLInputElement ? t : document.getElementById(t)),
            this.input.setAttribute("class", `${this._input.getAttribute("class")} ${this._classes.input}`),
            (this.result = this.build("div", [{ id: this._identifiers.results }, { class: this._classes.results }])),
            this.input.parentElement.setAttribute("class", `${this._input.parentElement.getAttribute("class")} ${this._classes.main} ${s.theme}`),
            this.input.parentElement.appendChild(this._result);
    }
    build(t, e = []) {
        const s = document.createElement(t);
        return (
            e.forEach((t) => {
                s.setAttribute(Object.keys(t)[0], Object.values(t)[0]);
            }),
            s
        );
    }
    focus(t) {
        if (isNaN(parseInt(t, 10)) || t < 0 || t > this.result.children.length - 1) throw new Error("pointer should be a valid integer in the result lenght range: " + t + " given.");
        (this.focused = null),
            Array.from(this.result.children).forEach((t) => {
                ((t) => {
                    t.className = this._classes.result;
                })(t);
            }),
            (this.focused = this.result.children[t]),
            (this.result.children[t].className += ` ${this._classes.focus}`);
    }
    buildResults(t, e) {
        let s = "";
        (s =
            t && t.length
                ? t.reduce((t, s) => {
                      switch (((t += `<div id="${s.idx}" class="${this._classes.result}">`), typeof s.data)) {
                          case "string":
                              t += `<span class="${this._classes.data}">${s.data}</span>`;
                              break;
                          case "object": {
                              let r = Array.isArray(e) && e.length ? e : Object.keys(s.data);
                              for (let e = 0; e < r.length; e++) t += `<span class="${this._classes.data}">${s.data[r[e]]}</span>`;
                              break;
                          }
                      }
                      return t + "</div>";
                  }, "")
                : `<div class="${this._classes.result}">Not found</div>`),
            (this.result.innerHTML = s),
            this._broadcaster.trigger(r.domDone, this.result);
    }
}
const m = function ({ input: t, data: e, options: s, onKeyup: r, onSelect: i, onError: o }) {
    const a = new u(),
        n = new h(s),
        m = new p(e),
        y = new d(t, a, n),
        g = n.cache ? new c(a, n.cache) : null;
    new l({ configuration: n, properties: m, dom: y, cache: g, broadcaster: a, onKeyup: r, onSelect: i, onError: o });
};
window.kompletr = m;
var y = e.L;
export { y as kompletr };
